/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "query GeneHeaderQuery($geneId: String!) {\n  geneInfo(geneId: $geneId) {\n    id\n    symbol\n    chromosome\n    start\n    end\n    bioType\n    description\n  }\n}": types.GeneHeaderQueryDocument,
    "query DataTracksTable {\n  getDataTracks {\n    id\n    url\n    cellType\n    bioSample\n    bioSampleID\n    trackType\n    trackSubType\n    fileFormat\n  }\n}": types.DataTracksTableDocument,
    "query StudyLocusHeaderQuery($studyId: String!, $variantId: String!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n    hasSumstats\n  }\n  variantInfo(variantId: $variantId) {\n    rsId\n    id\n  }\n}": types.StudyLocusHeaderQueryDocument,
    "query StudyHeaderQuery($studyId: String!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n    hasSumstats\n  }\n}": types.StudyHeaderQueryDocument,
    "query VariantHeader($variantId: String!) {\n  variantInfo(variantId: $variantId) {\n    rsId\n    id\n  }\n}": types.VariantHeaderDocument,
    "fragment VariantLinkageDisequilibrium on LinkageDisequilibrium {\n  id\n  variantId\n  variantRsId\n  variantPosition\n  r2\n  dPrime\n  egCellTypes\n  egGenes\n  mostSevereConsequence\n}\n\nquery VariantLinkageDisequilibrium($variantId: String!) {\n  linkageDisequilibriumsForVariant(variantId: $variantId) {\n    ...VariantLinkageDisequilibrium\n  }\n}": types.VariantLinkageDisequilibriumFragmentDoc,
    "query GWASRegionalQuery($studyId: String!, $chromosome: String!, $start: Long!, $end: Long!) {\n  regional: gwasRegional(\n    studyId: $studyId\n    chromosome: $chromosome\n    start: $start\n    end: $end\n  ) {\n    variant {\n      id\n      rsId\n      position\n    }\n    pval\n  }\n}": types.GwasRegionalQueryDocument,
    "query GenePageQuery($geneId: String!) {\n  geneInfo(geneId: $geneId) {\n    id\n    symbol\n    chromosome\n    start\n    end\n    bioType\n  }\n  studiesAndLeadVariantsForGeneByL2G(geneId: $geneId) {\n    pval\n    yProbaModel\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pmid\n      nInitial\n      nReplication\n      hasSumstats\n    }\n    variant {\n      rsId\n      id\n    }\n    odds {\n      oddsCI\n      oddsCILower\n      oddsCIUpper\n    }\n    beta {\n      betaCI\n      betaCILower\n      betaCIUpper\n      direction\n    }\n  }\n  colocalisationsForGene(geneId: $geneId) {\n    leftVariant {\n      id\n      rsId\n    }\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pmid\n      hasSumstats\n    }\n    qtlStudyId\n    phenotypeId\n    tissue {\n      id\n      name\n    }\n    h3\n    h4\n    log2h4h3\n  }\n}": types.GenePageQueryDocument,
    "query LocusPageQuery($optionalVariantId: String, $optionalGeneId: String, $optionalStudyId: String, $chromosome: String!, $start: Long!, $end: Long!) {\n  genes(chromosome: $chromosome, start: $start, end: $end) {\n    id\n    symbol\n    tss\n    start\n    end\n    exons\n  }\n  regionPlot(\n    optionalVariantId: $optionalVariantId\n    optionalGeneId: $optionalGeneId\n    optionalStudyId: $optionalStudyId\n  ) {\n    genes {\n      id\n      symbol\n      tss\n      start\n      end\n      exons\n    }\n    tagVariants {\n      id\n      rsId\n      position\n    }\n    indexVariants {\n      id\n      rsId\n      position\n    }\n    studies {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      hasSumstats\n    }\n    geneTagVariants {\n      geneId\n      tagVariantId\n      overallScore\n    }\n    tagVariantIndexVariantStudies {\n      tagVariantId\n      indexVariantId\n      studyId\n      r2\n      pval\n      posteriorProbability\n      oddsRatio\n      oddsRatioCILower\n      oddsRatioCIUpper\n      beta\n      betaCILower\n      betaCIUpper\n      direction\n    }\n  }\n}": types.LocusPageQueryDocument,
    "query PheWASQuery($variantId: String!) {\n  pheWAS(variantId: $variantId) {\n    totalGWASStudies\n    associations {\n      study {\n        studyId\n        traitReported\n        traitCategory\n        pmid\n        pubDate\n        pubAuthor\n        source\n      }\n      pval\n      beta\n      oddsRatio\n      nTotal\n      nCases\n      eaf\n      se\n    }\n  }\n}": types.PheWasQueryDocument,
    "query QTLRegionalQuery($studyId: String!, $bioFeature: String!, $geneId: String!, $chromosome: String!, $start: Long!, $end: Long!) {\n  regional: qtlRegional(\n    studyId: $studyId\n    geneId: $geneId\n    bioFeature: $bioFeature\n    chromosome: $chromosome\n    start: $start\n    end: $end\n  ) {\n    variant {\n      id\n      rsId\n      position\n    }\n    pval\n  }\n}": types.QtlRegionalQueryDocument,
    "fragment SearchQueryGenes on Gene {\n  id\n  symbol\n  chromosome\n  start\n  end\n}\n\nfragment SearchQueryVariants on Variant {\n  id\n  rsId\n  chromosome\n  position\n  refAllele\n  altAllele\n}\n\nfragment SearchQueryStudies on Study {\n  studyId\n  traitReported\n  pmid\n  pubAuthor\n  pubDate\n  pubJournal\n  nInitial\n  numAssocLoci\n  hasSumstats\n}\n\nquery SearchQuery($queryString: String!) {\n  search(queryString: $queryString) {\n    totalGenes\n    totalVariants\n    totalStudies\n    genes {\n      ...SearchQueryGenes\n    }\n    variants {\n      ...SearchQueryVariants\n    }\n    studies {\n      ...SearchQueryStudies\n    }\n  }\n}": types.SearchQueryGenesFragmentDoc,
    "query TopOverlappedStudiesQuery($studyId: String!, $studyIds: [String!]!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n  }\n  manhattan(studyId: $studyId) {\n    associations {\n      variant {\n        id\n        rsId\n        chromosome\n        position\n      }\n      pval\n      credibleSetSize\n      ldSetSize\n      bestGenes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n    }\n  }\n  topOverlappedStudies(studyId: $studyId) {\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      nInitial\n      nReplication\n      nCases\n    }\n    topStudiesByLociOverlap {\n      study {\n        studyId\n        traitReported\n        pubAuthor\n        pubDate\n        pubJournal\n        pmid\n        nInitial\n        nReplication\n        nCases\n      }\n      numOverlapLoci\n    }\n  }\n  overlapInfoForStudy(studyId: $studyId, studyIds: $studyIds) {\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      nInitial\n      nReplication\n      nCases\n    }\n    overlappedVariantsForStudies {\n      study {\n        studyId\n        traitReported\n        pubAuthor\n        pubDate\n        pubJournal\n        pmid\n        nInitial\n        nReplication\n        nCases\n      }\n      overlaps {\n        variantIdA\n        variantIdB\n        overlapAB\n        distinctA\n        distinctB\n      }\n    }\n    variantIntersectionSet\n  }\n}": types.TopOverlappedStudiesQueryDocument,
    "query StudyLocusPageQuery($studyId: String!, $variantId: String!, $chromosome: String!, $start: Long!, $end: Long!) {\n  variantInfo(variantId: $variantId) {\n    rsId\n    chromosome\n    position\n    refAllele\n    altAllele\n    chromosomeB37\n    positionB37\n  }\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n  }\n  studyLocus2GeneTable(studyId: $studyId, variantId: $variantId) {\n    rows {\n      gene {\n        symbol\n        id\n      }\n      yProbaModel\n      yProbaDistance\n      yProbaInteraction\n      yProbaMolecularQTL\n      yProbaPathogenicity\n      hasColoc\n      distanceToLocus\n    }\n  }\n  gwasColocalisation(studyId: $studyId, variantId: $variantId) {\n    indexVariant {\n      id\n      rsId\n      chromosome\n      position\n      refAllele\n      altAllele\n    }\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      hasSumstats\n    }\n    beta\n    h3\n    h4\n    log2h4h3\n  }\n  qtlColocalisation(studyId: $studyId, variantId: $variantId) {\n    indexVariant {\n      id\n      rsId\n      chromosome\n      position\n      refAllele\n      altAllele\n    }\n    gene {\n      id\n      symbol\n      chromosome\n      start\n      end\n      bioType\n    }\n    phenotypeId\n    tissue {\n      id\n      name\n    }\n    qtlStudyName\n    beta\n    h3\n    h4\n    log2h4h3\n  }\n  pageCredibleSet: gwasCredibleSet(studyId: $studyId, variantId: $variantId) {\n    tagVariant {\n      id\n      rsId\n      position\n    }\n    pval\n    se\n    beta\n    postProb\n    MultisignalMethod\n    logABF\n    is95\n    is99\n  }\n  pageSummary: studyAndLeadVariantInfo(studyId: $studyId, variantId: $variantId) {\n    indexVariant {\n      rsId\n    }\n    study {\n      traitReported\n    }\n    pvalMantissa\n    pvalExponent\n    oddsRatio\n    oddsRatioCILower\n    oddsRatioCIUpper\n    beta\n    direction\n    betaCILower\n    betaCIUpper\n  }\n  genes(chromosome: $chromosome, start: $start, end: $end) {\n    id\n    symbol\n    tss\n    start\n    end\n    exons\n  }\n}": types.StudyLocusPageQueryDocument,
    "query StudyPageQuery($studyId: String!) {\n  manhattan(studyId: $studyId) {\n    associations {\n      variant {\n        id\n        rsId\n        chromosome\n        position\n        nearestCodingGene {\n          id\n          symbol\n        }\n        nearestCodingGeneDistance\n      }\n      pval\n      credibleSetSize\n      ldSetSize\n      oddsRatio\n      oddsRatioCILower\n      oddsRatioCIUpper\n      beta\n      betaCILower\n      betaCIUpper\n      direction\n      bestGenes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n      bestColocGenes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n      bestLocus2Genes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n    }\n  }\n}": types.StudyPageQueryDocument,
    "fragment VariantPageEnhancerGenePrediction on EnhancerGenePrediction {\n  id\n  score\n  cellType\n  score\n  variantToGeneDistance\n  enhancerStart\n  enhancerClass\n  enhancerEnd\n  targetGeneTss\n  enhancerToGeneDistance\n  pip\n  model\n  dataset\n  isTemporary\n  datatrackURL\n  targetGene {\n    id\n    symbol\n  }\n}\n\nfragment VariantPageBpnetPrediction on BpnetPrediction {\n  id\n  logfc\n  logfcPval\n  jsd\n  jsdPval\n  maxPercentile\n  logfcMaxPercentile\n  logfcMaxPercentilePval\n  allele1PredCount\n  allele2PredCount\n  allele1TFFamily\n  allele2TFFamily\n  allele1Motif\n  allele2Motif\n  cellType\n  dataset\n  isTemporary\n}\n\nquery VariantPage($variantId: String!) {\n  genesForVariantSchema {\n    qtls {\n      id\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n    intervals {\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n    functionalPredictions {\n      id\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n    distances {\n      id\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n  }\n  genesForVariant(variantId: $variantId) {\n    gene {\n      id\n      symbol\n    }\n    overallScore\n    qtls {\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        quantile\n        beta\n        pval\n      }\n    }\n    intervals {\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        quantile\n        score\n      }\n    }\n    functionalPredictions {\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        maxEffectLabel\n        maxEffectScore\n      }\n    }\n    distances {\n      typeId\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        distance\n        score\n        quantile\n      }\n    }\n  }\n  indexVariantsAndStudiesForTagVariant(variantId: $variantId) {\n    associations {\n      indexVariant {\n        id\n        rsId\n      }\n      study {\n        studyId\n        traitReported\n        pmid\n        pubDate\n        pubAuthor\n        hasSumstats\n      }\n      pval\n      nTotal\n      overallR2\n      posteriorProbability\n      oddsRatio\n      oddsRatioCILower\n      oddsRatioCIUpper\n      beta\n      betaCILower\n      betaCIUpper\n      direction\n    }\n  }\n  tagVariantsAndStudiesForIndexVariant(variantId: $variantId) {\n    associations {\n      tagVariant {\n        id\n        rsId\n      }\n      study {\n        studyId\n        traitReported\n        pmid\n        pubDate\n        pubAuthor\n      }\n      pval\n      nTotal\n      overallR2\n      posteriorProbability\n    }\n  }\n  variantInfo(variantId: $variantId) {\n    enhancerGenePredictions {\n      ...VariantPageEnhancerGenePrediction\n    }\n    bpnetPredictions {\n      ...VariantPageBpnetPrediction\n    }\n  }\n}": types.VariantPageEnhancerGenePredictionFragmentDoc,
    "query StudySummaryQuery($studyId: String!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n    hasSumstats\n  }\n}": types.StudySummaryQueryDocument,
    "query VariantSummary($variantId: String!) {\n  variantInfo(variantId: $variantId) {\n    id\n    rsId\n    chromosome\n    position\n    chromosomeB37\n    positionB37\n    refAllele\n    altAllele\n    nearestGene {\n      id\n      symbol\n    }\n    nearestGeneDistance\n    nearestCodingGene {\n      id\n      symbol\n    }\n    nearestCodingGeneDistance\n    mostSevereConsequence\n    caddRaw\n    caddPhred\n    gnomadAFR\n    gnomadAMR\n    gnomadASJ\n    gnomadEAS\n    gnomadFIN\n    gnomadNFE\n    gnomadNFEEST\n    gnomadNFENWE\n    gnomadNFESEU\n    gnomadOTH\n    uniqueEnhancerGenePredictionCellTypes\n    uniqueEnhancerGenePredictionTargetGenes {\n      id\n      symbol\n    }\n    bpnetPredictions {\n      logfc\n      logfcPval\n      cellType\n    }\n  }\n}": types.VariantSummaryDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GeneHeaderQuery($geneId: String!) {\n  geneInfo(geneId: $geneId) {\n    id\n    symbol\n    chromosome\n    start\n    end\n    bioType\n    description\n  }\n}"): (typeof documents)["query GeneHeaderQuery($geneId: String!) {\n  geneInfo(geneId: $geneId) {\n    id\n    symbol\n    chromosome\n    start\n    end\n    bioType\n    description\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query DataTracksTable {\n  getDataTracks {\n    id\n    url\n    cellType\n    bioSample\n    bioSampleID\n    trackType\n    trackSubType\n    fileFormat\n  }\n}"): (typeof documents)["query DataTracksTable {\n  getDataTracks {\n    id\n    url\n    cellType\n    bioSample\n    bioSampleID\n    trackType\n    trackSubType\n    fileFormat\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query StudyLocusHeaderQuery($studyId: String!, $variantId: String!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n    hasSumstats\n  }\n  variantInfo(variantId: $variantId) {\n    rsId\n    id\n  }\n}"): (typeof documents)["query StudyLocusHeaderQuery($studyId: String!, $variantId: String!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n    hasSumstats\n  }\n  variantInfo(variantId: $variantId) {\n    rsId\n    id\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query StudyHeaderQuery($studyId: String!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n    hasSumstats\n  }\n}"): (typeof documents)["query StudyHeaderQuery($studyId: String!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n    hasSumstats\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query VariantHeader($variantId: String!) {\n  variantInfo(variantId: $variantId) {\n    rsId\n    id\n  }\n}"): (typeof documents)["query VariantHeader($variantId: String!) {\n  variantInfo(variantId: $variantId) {\n    rsId\n    id\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment VariantLinkageDisequilibrium on LinkageDisequilibrium {\n  id\n  variantId\n  variantRsId\n  variantPosition\n  r2\n  dPrime\n  egCellTypes\n  egGenes\n  mostSevereConsequence\n}\n\nquery VariantLinkageDisequilibrium($variantId: String!) {\n  linkageDisequilibriumsForVariant(variantId: $variantId) {\n    ...VariantLinkageDisequilibrium\n  }\n}"): (typeof documents)["fragment VariantLinkageDisequilibrium on LinkageDisequilibrium {\n  id\n  variantId\n  variantRsId\n  variantPosition\n  r2\n  dPrime\n  egCellTypes\n  egGenes\n  mostSevereConsequence\n}\n\nquery VariantLinkageDisequilibrium($variantId: String!) {\n  linkageDisequilibriumsForVariant(variantId: $variantId) {\n    ...VariantLinkageDisequilibrium\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GWASRegionalQuery($studyId: String!, $chromosome: String!, $start: Long!, $end: Long!) {\n  regional: gwasRegional(\n    studyId: $studyId\n    chromosome: $chromosome\n    start: $start\n    end: $end\n  ) {\n    variant {\n      id\n      rsId\n      position\n    }\n    pval\n  }\n}"): (typeof documents)["query GWASRegionalQuery($studyId: String!, $chromosome: String!, $start: Long!, $end: Long!) {\n  regional: gwasRegional(\n    studyId: $studyId\n    chromosome: $chromosome\n    start: $start\n    end: $end\n  ) {\n    variant {\n      id\n      rsId\n      position\n    }\n    pval\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GenePageQuery($geneId: String!) {\n  geneInfo(geneId: $geneId) {\n    id\n    symbol\n    chromosome\n    start\n    end\n    bioType\n  }\n  studiesAndLeadVariantsForGeneByL2G(geneId: $geneId) {\n    pval\n    yProbaModel\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pmid\n      nInitial\n      nReplication\n      hasSumstats\n    }\n    variant {\n      rsId\n      id\n    }\n    odds {\n      oddsCI\n      oddsCILower\n      oddsCIUpper\n    }\n    beta {\n      betaCI\n      betaCILower\n      betaCIUpper\n      direction\n    }\n  }\n  colocalisationsForGene(geneId: $geneId) {\n    leftVariant {\n      id\n      rsId\n    }\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pmid\n      hasSumstats\n    }\n    qtlStudyId\n    phenotypeId\n    tissue {\n      id\n      name\n    }\n    h3\n    h4\n    log2h4h3\n  }\n}"): (typeof documents)["query GenePageQuery($geneId: String!) {\n  geneInfo(geneId: $geneId) {\n    id\n    symbol\n    chromosome\n    start\n    end\n    bioType\n  }\n  studiesAndLeadVariantsForGeneByL2G(geneId: $geneId) {\n    pval\n    yProbaModel\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pmid\n      nInitial\n      nReplication\n      hasSumstats\n    }\n    variant {\n      rsId\n      id\n    }\n    odds {\n      oddsCI\n      oddsCILower\n      oddsCIUpper\n    }\n    beta {\n      betaCI\n      betaCILower\n      betaCIUpper\n      direction\n    }\n  }\n  colocalisationsForGene(geneId: $geneId) {\n    leftVariant {\n      id\n      rsId\n    }\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pmid\n      hasSumstats\n    }\n    qtlStudyId\n    phenotypeId\n    tissue {\n      id\n      name\n    }\n    h3\n    h4\n    log2h4h3\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query LocusPageQuery($optionalVariantId: String, $optionalGeneId: String, $optionalStudyId: String, $chromosome: String!, $start: Long!, $end: Long!) {\n  genes(chromosome: $chromosome, start: $start, end: $end) {\n    id\n    symbol\n    tss\n    start\n    end\n    exons\n  }\n  regionPlot(\n    optionalVariantId: $optionalVariantId\n    optionalGeneId: $optionalGeneId\n    optionalStudyId: $optionalStudyId\n  ) {\n    genes {\n      id\n      symbol\n      tss\n      start\n      end\n      exons\n    }\n    tagVariants {\n      id\n      rsId\n      position\n    }\n    indexVariants {\n      id\n      rsId\n      position\n    }\n    studies {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      hasSumstats\n    }\n    geneTagVariants {\n      geneId\n      tagVariantId\n      overallScore\n    }\n    tagVariantIndexVariantStudies {\n      tagVariantId\n      indexVariantId\n      studyId\n      r2\n      pval\n      posteriorProbability\n      oddsRatio\n      oddsRatioCILower\n      oddsRatioCIUpper\n      beta\n      betaCILower\n      betaCIUpper\n      direction\n    }\n  }\n}"): (typeof documents)["query LocusPageQuery($optionalVariantId: String, $optionalGeneId: String, $optionalStudyId: String, $chromosome: String!, $start: Long!, $end: Long!) {\n  genes(chromosome: $chromosome, start: $start, end: $end) {\n    id\n    symbol\n    tss\n    start\n    end\n    exons\n  }\n  regionPlot(\n    optionalVariantId: $optionalVariantId\n    optionalGeneId: $optionalGeneId\n    optionalStudyId: $optionalStudyId\n  ) {\n    genes {\n      id\n      symbol\n      tss\n      start\n      end\n      exons\n    }\n    tagVariants {\n      id\n      rsId\n      position\n    }\n    indexVariants {\n      id\n      rsId\n      position\n    }\n    studies {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      hasSumstats\n    }\n    geneTagVariants {\n      geneId\n      tagVariantId\n      overallScore\n    }\n    tagVariantIndexVariantStudies {\n      tagVariantId\n      indexVariantId\n      studyId\n      r2\n      pval\n      posteriorProbability\n      oddsRatio\n      oddsRatioCILower\n      oddsRatioCIUpper\n      beta\n      betaCILower\n      betaCIUpper\n      direction\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query PheWASQuery($variantId: String!) {\n  pheWAS(variantId: $variantId) {\n    totalGWASStudies\n    associations {\n      study {\n        studyId\n        traitReported\n        traitCategory\n        pmid\n        pubDate\n        pubAuthor\n        source\n      }\n      pval\n      beta\n      oddsRatio\n      nTotal\n      nCases\n      eaf\n      se\n    }\n  }\n}"): (typeof documents)["query PheWASQuery($variantId: String!) {\n  pheWAS(variantId: $variantId) {\n    totalGWASStudies\n    associations {\n      study {\n        studyId\n        traitReported\n        traitCategory\n        pmid\n        pubDate\n        pubAuthor\n        source\n      }\n      pval\n      beta\n      oddsRatio\n      nTotal\n      nCases\n      eaf\n      se\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query QTLRegionalQuery($studyId: String!, $bioFeature: String!, $geneId: String!, $chromosome: String!, $start: Long!, $end: Long!) {\n  regional: qtlRegional(\n    studyId: $studyId\n    geneId: $geneId\n    bioFeature: $bioFeature\n    chromosome: $chromosome\n    start: $start\n    end: $end\n  ) {\n    variant {\n      id\n      rsId\n      position\n    }\n    pval\n  }\n}"): (typeof documents)["query QTLRegionalQuery($studyId: String!, $bioFeature: String!, $geneId: String!, $chromosome: String!, $start: Long!, $end: Long!) {\n  regional: qtlRegional(\n    studyId: $studyId\n    geneId: $geneId\n    bioFeature: $bioFeature\n    chromosome: $chromosome\n    start: $start\n    end: $end\n  ) {\n    variant {\n      id\n      rsId\n      position\n    }\n    pval\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment SearchQueryGenes on Gene {\n  id\n  symbol\n  chromosome\n  start\n  end\n}\n\nfragment SearchQueryVariants on Variant {\n  id\n  rsId\n  chromosome\n  position\n  refAllele\n  altAllele\n}\n\nfragment SearchQueryStudies on Study {\n  studyId\n  traitReported\n  pmid\n  pubAuthor\n  pubDate\n  pubJournal\n  nInitial\n  numAssocLoci\n  hasSumstats\n}\n\nquery SearchQuery($queryString: String!) {\n  search(queryString: $queryString) {\n    totalGenes\n    totalVariants\n    totalStudies\n    genes {\n      ...SearchQueryGenes\n    }\n    variants {\n      ...SearchQueryVariants\n    }\n    studies {\n      ...SearchQueryStudies\n    }\n  }\n}"): (typeof documents)["fragment SearchQueryGenes on Gene {\n  id\n  symbol\n  chromosome\n  start\n  end\n}\n\nfragment SearchQueryVariants on Variant {\n  id\n  rsId\n  chromosome\n  position\n  refAllele\n  altAllele\n}\n\nfragment SearchQueryStudies on Study {\n  studyId\n  traitReported\n  pmid\n  pubAuthor\n  pubDate\n  pubJournal\n  nInitial\n  numAssocLoci\n  hasSumstats\n}\n\nquery SearchQuery($queryString: String!) {\n  search(queryString: $queryString) {\n    totalGenes\n    totalVariants\n    totalStudies\n    genes {\n      ...SearchQueryGenes\n    }\n    variants {\n      ...SearchQueryVariants\n    }\n    studies {\n      ...SearchQueryStudies\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query TopOverlappedStudiesQuery($studyId: String!, $studyIds: [String!]!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n  }\n  manhattan(studyId: $studyId) {\n    associations {\n      variant {\n        id\n        rsId\n        chromosome\n        position\n      }\n      pval\n      credibleSetSize\n      ldSetSize\n      bestGenes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n    }\n  }\n  topOverlappedStudies(studyId: $studyId) {\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      nInitial\n      nReplication\n      nCases\n    }\n    topStudiesByLociOverlap {\n      study {\n        studyId\n        traitReported\n        pubAuthor\n        pubDate\n        pubJournal\n        pmid\n        nInitial\n        nReplication\n        nCases\n      }\n      numOverlapLoci\n    }\n  }\n  overlapInfoForStudy(studyId: $studyId, studyIds: $studyIds) {\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      nInitial\n      nReplication\n      nCases\n    }\n    overlappedVariantsForStudies {\n      study {\n        studyId\n        traitReported\n        pubAuthor\n        pubDate\n        pubJournal\n        pmid\n        nInitial\n        nReplication\n        nCases\n      }\n      overlaps {\n        variantIdA\n        variantIdB\n        overlapAB\n        distinctA\n        distinctB\n      }\n    }\n    variantIntersectionSet\n  }\n}"): (typeof documents)["query TopOverlappedStudiesQuery($studyId: String!, $studyIds: [String!]!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n  }\n  manhattan(studyId: $studyId) {\n    associations {\n      variant {\n        id\n        rsId\n        chromosome\n        position\n      }\n      pval\n      credibleSetSize\n      ldSetSize\n      bestGenes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n    }\n  }\n  topOverlappedStudies(studyId: $studyId) {\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      nInitial\n      nReplication\n      nCases\n    }\n    topStudiesByLociOverlap {\n      study {\n        studyId\n        traitReported\n        pubAuthor\n        pubDate\n        pubJournal\n        pmid\n        nInitial\n        nReplication\n        nCases\n      }\n      numOverlapLoci\n    }\n  }\n  overlapInfoForStudy(studyId: $studyId, studyIds: $studyIds) {\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      nInitial\n      nReplication\n      nCases\n    }\n    overlappedVariantsForStudies {\n      study {\n        studyId\n        traitReported\n        pubAuthor\n        pubDate\n        pubJournal\n        pmid\n        nInitial\n        nReplication\n        nCases\n      }\n      overlaps {\n        variantIdA\n        variantIdB\n        overlapAB\n        distinctA\n        distinctB\n      }\n    }\n    variantIntersectionSet\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query StudyLocusPageQuery($studyId: String!, $variantId: String!, $chromosome: String!, $start: Long!, $end: Long!) {\n  variantInfo(variantId: $variantId) {\n    rsId\n    chromosome\n    position\n    refAllele\n    altAllele\n    chromosomeB37\n    positionB37\n  }\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n  }\n  studyLocus2GeneTable(studyId: $studyId, variantId: $variantId) {\n    rows {\n      gene {\n        symbol\n        id\n      }\n      yProbaModel\n      yProbaDistance\n      yProbaInteraction\n      yProbaMolecularQTL\n      yProbaPathogenicity\n      hasColoc\n      distanceToLocus\n    }\n  }\n  gwasColocalisation(studyId: $studyId, variantId: $variantId) {\n    indexVariant {\n      id\n      rsId\n      chromosome\n      position\n      refAllele\n      altAllele\n    }\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      hasSumstats\n    }\n    beta\n    h3\n    h4\n    log2h4h3\n  }\n  qtlColocalisation(studyId: $studyId, variantId: $variantId) {\n    indexVariant {\n      id\n      rsId\n      chromosome\n      position\n      refAllele\n      altAllele\n    }\n    gene {\n      id\n      symbol\n      chromosome\n      start\n      end\n      bioType\n    }\n    phenotypeId\n    tissue {\n      id\n      name\n    }\n    qtlStudyName\n    beta\n    h3\n    h4\n    log2h4h3\n  }\n  pageCredibleSet: gwasCredibleSet(studyId: $studyId, variantId: $variantId) {\n    tagVariant {\n      id\n      rsId\n      position\n    }\n    pval\n    se\n    beta\n    postProb\n    MultisignalMethod\n    logABF\n    is95\n    is99\n  }\n  pageSummary: studyAndLeadVariantInfo(studyId: $studyId, variantId: $variantId) {\n    indexVariant {\n      rsId\n    }\n    study {\n      traitReported\n    }\n    pvalMantissa\n    pvalExponent\n    oddsRatio\n    oddsRatioCILower\n    oddsRatioCIUpper\n    beta\n    direction\n    betaCILower\n    betaCIUpper\n  }\n  genes(chromosome: $chromosome, start: $start, end: $end) {\n    id\n    symbol\n    tss\n    start\n    end\n    exons\n  }\n}"): (typeof documents)["query StudyLocusPageQuery($studyId: String!, $variantId: String!, $chromosome: String!, $start: Long!, $end: Long!) {\n  variantInfo(variantId: $variantId) {\n    rsId\n    chromosome\n    position\n    refAllele\n    altAllele\n    chromosomeB37\n    positionB37\n  }\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n  }\n  studyLocus2GeneTable(studyId: $studyId, variantId: $variantId) {\n    rows {\n      gene {\n        symbol\n        id\n      }\n      yProbaModel\n      yProbaDistance\n      yProbaInteraction\n      yProbaMolecularQTL\n      yProbaPathogenicity\n      hasColoc\n      distanceToLocus\n    }\n  }\n  gwasColocalisation(studyId: $studyId, variantId: $variantId) {\n    indexVariant {\n      id\n      rsId\n      chromosome\n      position\n      refAllele\n      altAllele\n    }\n    study {\n      studyId\n      traitReported\n      pubAuthor\n      pubDate\n      pubJournal\n      pmid\n      hasSumstats\n    }\n    beta\n    h3\n    h4\n    log2h4h3\n  }\n  qtlColocalisation(studyId: $studyId, variantId: $variantId) {\n    indexVariant {\n      id\n      rsId\n      chromosome\n      position\n      refAllele\n      altAllele\n    }\n    gene {\n      id\n      symbol\n      chromosome\n      start\n      end\n      bioType\n    }\n    phenotypeId\n    tissue {\n      id\n      name\n    }\n    qtlStudyName\n    beta\n    h3\n    h4\n    log2h4h3\n  }\n  pageCredibleSet: gwasCredibleSet(studyId: $studyId, variantId: $variantId) {\n    tagVariant {\n      id\n      rsId\n      position\n    }\n    pval\n    se\n    beta\n    postProb\n    MultisignalMethod\n    logABF\n    is95\n    is99\n  }\n  pageSummary: studyAndLeadVariantInfo(studyId: $studyId, variantId: $variantId) {\n    indexVariant {\n      rsId\n    }\n    study {\n      traitReported\n    }\n    pvalMantissa\n    pvalExponent\n    oddsRatio\n    oddsRatioCILower\n    oddsRatioCIUpper\n    beta\n    direction\n    betaCILower\n    betaCIUpper\n  }\n  genes(chromosome: $chromosome, start: $start, end: $end) {\n    id\n    symbol\n    tss\n    start\n    end\n    exons\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query StudyPageQuery($studyId: String!) {\n  manhattan(studyId: $studyId) {\n    associations {\n      variant {\n        id\n        rsId\n        chromosome\n        position\n        nearestCodingGene {\n          id\n          symbol\n        }\n        nearestCodingGeneDistance\n      }\n      pval\n      credibleSetSize\n      ldSetSize\n      oddsRatio\n      oddsRatioCILower\n      oddsRatioCIUpper\n      beta\n      betaCILower\n      betaCIUpper\n      direction\n      bestGenes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n      bestColocGenes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n      bestLocus2Genes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query StudyPageQuery($studyId: String!) {\n  manhattan(studyId: $studyId) {\n    associations {\n      variant {\n        id\n        rsId\n        chromosome\n        position\n        nearestCodingGene {\n          id\n          symbol\n        }\n        nearestCodingGeneDistance\n      }\n      pval\n      credibleSetSize\n      ldSetSize\n      oddsRatio\n      oddsRatioCILower\n      oddsRatioCIUpper\n      beta\n      betaCILower\n      betaCIUpper\n      direction\n      bestGenes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n      bestColocGenes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n      bestLocus2Genes {\n        score\n        gene {\n          id\n          symbol\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment VariantPageEnhancerGenePrediction on EnhancerGenePrediction {\n  id\n  score\n  cellType\n  score\n  variantToGeneDistance\n  enhancerStart\n  enhancerClass\n  enhancerEnd\n  targetGeneTss\n  enhancerToGeneDistance\n  pip\n  model\n  dataset\n  isTemporary\n  datatrackURL\n  targetGene {\n    id\n    symbol\n  }\n}\n\nfragment VariantPageBpnetPrediction on BpnetPrediction {\n  id\n  logfc\n  logfcPval\n  jsd\n  jsdPval\n  maxPercentile\n  logfcMaxPercentile\n  logfcMaxPercentilePval\n  allele1PredCount\n  allele2PredCount\n  allele1TFFamily\n  allele2TFFamily\n  allele1Motif\n  allele2Motif\n  cellType\n  dataset\n  isTemporary\n}\n\nquery VariantPage($variantId: String!) {\n  genesForVariantSchema {\n    qtls {\n      id\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n    intervals {\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n    functionalPredictions {\n      id\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n    distances {\n      id\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n  }\n  genesForVariant(variantId: $variantId) {\n    gene {\n      id\n      symbol\n    }\n    overallScore\n    qtls {\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        quantile\n        beta\n        pval\n      }\n    }\n    intervals {\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        quantile\n        score\n      }\n    }\n    functionalPredictions {\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        maxEffectLabel\n        maxEffectScore\n      }\n    }\n    distances {\n      typeId\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        distance\n        score\n        quantile\n      }\n    }\n  }\n  indexVariantsAndStudiesForTagVariant(variantId: $variantId) {\n    associations {\n      indexVariant {\n        id\n        rsId\n      }\n      study {\n        studyId\n        traitReported\n        pmid\n        pubDate\n        pubAuthor\n        hasSumstats\n      }\n      pval\n      nTotal\n      overallR2\n      posteriorProbability\n      oddsRatio\n      oddsRatioCILower\n      oddsRatioCIUpper\n      beta\n      betaCILower\n      betaCIUpper\n      direction\n    }\n  }\n  tagVariantsAndStudiesForIndexVariant(variantId: $variantId) {\n    associations {\n      tagVariant {\n        id\n        rsId\n      }\n      study {\n        studyId\n        traitReported\n        pmid\n        pubDate\n        pubAuthor\n      }\n      pval\n      nTotal\n      overallR2\n      posteriorProbability\n    }\n  }\n  variantInfo(variantId: $variantId) {\n    enhancerGenePredictions {\n      ...VariantPageEnhancerGenePrediction\n    }\n    bpnetPredictions {\n      ...VariantPageBpnetPrediction\n    }\n  }\n}"): (typeof documents)["fragment VariantPageEnhancerGenePrediction on EnhancerGenePrediction {\n  id\n  score\n  cellType\n  score\n  variantToGeneDistance\n  enhancerStart\n  enhancerClass\n  enhancerEnd\n  targetGeneTss\n  enhancerToGeneDistance\n  pip\n  model\n  dataset\n  isTemporary\n  datatrackURL\n  targetGene {\n    id\n    symbol\n  }\n}\n\nfragment VariantPageBpnetPrediction on BpnetPrediction {\n  id\n  logfc\n  logfcPval\n  jsd\n  jsdPval\n  maxPercentile\n  logfcMaxPercentile\n  logfcMaxPercentilePval\n  allele1PredCount\n  allele2PredCount\n  allele1TFFamily\n  allele2TFFamily\n  allele1Motif\n  allele2Motif\n  cellType\n  dataset\n  isTemporary\n}\n\nquery VariantPage($variantId: String!) {\n  genesForVariantSchema {\n    qtls {\n      id\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n    intervals {\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n    functionalPredictions {\n      id\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n    distances {\n      id\n      sourceId\n      sourceLabel\n      sourceDescriptionOverview\n      sourceDescriptionBreakdown\n      pmid\n      tissues {\n        id\n        name\n      }\n    }\n  }\n  genesForVariant(variantId: $variantId) {\n    gene {\n      id\n      symbol\n    }\n    overallScore\n    qtls {\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        quantile\n        beta\n        pval\n      }\n    }\n    intervals {\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        quantile\n        score\n      }\n    }\n    functionalPredictions {\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        maxEffectLabel\n        maxEffectScore\n      }\n    }\n    distances {\n      typeId\n      sourceId\n      aggregatedScore\n      tissues {\n        tissue {\n          id\n          name\n        }\n        distance\n        score\n        quantile\n      }\n    }\n  }\n  indexVariantsAndStudiesForTagVariant(variantId: $variantId) {\n    associations {\n      indexVariant {\n        id\n        rsId\n      }\n      study {\n        studyId\n        traitReported\n        pmid\n        pubDate\n        pubAuthor\n        hasSumstats\n      }\n      pval\n      nTotal\n      overallR2\n      posteriorProbability\n      oddsRatio\n      oddsRatioCILower\n      oddsRatioCIUpper\n      beta\n      betaCILower\n      betaCIUpper\n      direction\n    }\n  }\n  tagVariantsAndStudiesForIndexVariant(variantId: $variantId) {\n    associations {\n      tagVariant {\n        id\n        rsId\n      }\n      study {\n        studyId\n        traitReported\n        pmid\n        pubDate\n        pubAuthor\n      }\n      pval\n      nTotal\n      overallR2\n      posteriorProbability\n    }\n  }\n  variantInfo(variantId: $variantId) {\n    enhancerGenePredictions {\n      ...VariantPageEnhancerGenePrediction\n    }\n    bpnetPredictions {\n      ...VariantPageBpnetPrediction\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query StudySummaryQuery($studyId: String!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n    hasSumstats\n  }\n}"): (typeof documents)["query StudySummaryQuery($studyId: String!) {\n  studyInfo(studyId: $studyId) {\n    studyId\n    traitReported\n    pubAuthor\n    pubDate\n    pubJournal\n    pmid\n    nInitial\n    nReplication\n    nCases\n    hasSumstats\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query VariantSummary($variantId: String!) {\n  variantInfo(variantId: $variantId) {\n    id\n    rsId\n    chromosome\n    position\n    chromosomeB37\n    positionB37\n    refAllele\n    altAllele\n    nearestGene {\n      id\n      symbol\n    }\n    nearestGeneDistance\n    nearestCodingGene {\n      id\n      symbol\n    }\n    nearestCodingGeneDistance\n    mostSevereConsequence\n    caddRaw\n    caddPhred\n    gnomadAFR\n    gnomadAMR\n    gnomadASJ\n    gnomadEAS\n    gnomadFIN\n    gnomadNFE\n    gnomadNFEEST\n    gnomadNFENWE\n    gnomadNFESEU\n    gnomadOTH\n    uniqueEnhancerGenePredictionCellTypes\n    uniqueEnhancerGenePredictionTargetGenes {\n      id\n      symbol\n    }\n    bpnetPredictions {\n      logfc\n      logfcPval\n      cellType\n    }\n  }\n}"): (typeof documents)["query VariantSummary($variantId: String!) {\n  variantInfo(variantId: $variantId) {\n    id\n    rsId\n    chromosome\n    position\n    chromosomeB37\n    positionB37\n    refAllele\n    altAllele\n    nearestGene {\n      id\n      symbol\n    }\n    nearestGeneDistance\n    nearestCodingGene {\n      id\n      symbol\n    }\n    nearestCodingGeneDistance\n    mostSevereConsequence\n    caddRaw\n    caddPhred\n    gnomadAFR\n    gnomadAMR\n    gnomadASJ\n    gnomadEAS\n    gnomadFIN\n    gnomadNFE\n    gnomadNFEEST\n    gnomadNFENWE\n    gnomadNFESEU\n    gnomadOTH\n    uniqueEnhancerGenePredictionCellTypes\n    uniqueEnhancerGenePredictionTargetGenes {\n      id\n      symbol\n    }\n    bpnetPredictions {\n      logfc\n      logfcPval\n      cellType\n    }\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;